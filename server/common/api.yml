swagger: "2.0"
info:
  version: 1.0.0
  title: X-tutor
  description: "X Tutor - Where your money become air :)"
basePath: /api/v1
tags:
  - name: Examples
    description: Simple example endpoints
  - name: Specification
    description: The swagger API specification
  - name: Auth
    description: Auth
  - name: Users
    description: Users endpoints
  - name: Tuition Schedules
    description: i don't know how can i detail description of this
  - name: Sessions
    description: tuition activity session

consumes:
  - application/json
produces:
  - application/json


definitions:
  # Schema for error response body
  Error:
    type: object
    properties:
      success:
        type: boolean
      message:
        type: string
    required:
      - success
      - message
  
  ExampleBody:
    type: object
    title: example
    required:
      - name
    properties:
      name:
        type: string
        example: no_stress

  RegisterBody:
    type: object
    title: register user
    required:
      - username
      - password
      - email
      - rolesId
    properties:
      username:
        type: string
        example: huongpham211
      email:
        type: string
        example: huongpham211@gmail.com
      password:
        type: string
        format: password
        example: "huonghuong"
      rolesId:
        type: string
        enum: ['Tutor', 'Student']
        example: Tutor

  SignInBody:
    type: object
    title: login
    properties:
      username:
        type: string
      password:
        type: string
        format: password

  UserBody:
    type: object
    title: user
    properties:
      firstName:
       type: string
       example: Huong
      lastName:
        type: string
        example: Pham
      otherName:
       type: string
       example: Cao
      address:
        type: string
        example: 75 Ho Tung Mau
      country:
        type: string
        example: Viet Nam
      nationality:
        type: string
        example: Laos
      raceName:
        type: string
        example: 
      gender:
        type: string
        example: Female
        enum: ['Female', 'Male', 'Others']
      religion:
        type: string
        example: No religion
      email:
        type: string
      CurrentAcademicLevel:
        type: string
        example: Primary School
      city:
        type: string
        example: Ha Noi
      dateOfBirth:
        type: string
        format: date
      language:
        type: string
        example: vietnamese
  
  PaymentCardBody:
    type: object
    title: paymentCard
    required:
    - cardNumber
    - nameOnCard
    - cardType
    - expiredDate
    properties:
      cardType:
        type: string
        enum: ['Master Card', 'Visa']
        example: Master Card
      cardNumber:
        type: number
        example: 7893347716378
      expiredDate:
        type: string
        format: date
      nameOnCard:
        type: string
        example: PHAM HUONG
      residentialAddress:
        type: string
        example: 75 Ho Tung Mau
      city:
        type: string
        example: Ha Noi
      country:
        type: string
        example: VIET NAM
      postalCode:
        type: string
        example: "460000"
      remarks:
        type: string
        example: nothing

  TuitionScheduleBody:
    type: object
    title: schedule
    required:
      - preferDay
      - periodeStart
    properties:      
      preferDay:
        type: array
        items: 
          type: string
          enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
      periodeStart:
        type: string
        format: date-time
      periodeEnd:
        type: string
        format: date
        example: '2019-11-10'
      # lessionsPerCourse:
      #   type: integer
      #   example: 6
      academicLevel:
        type: string
        example: Beginner
      hoursPerLession:
        type: number
        example: 2
      hourStart:
        type: integer

  TutorIntro:
    type: object
    title: tutorIntro
    properties:
      aboutMe:
        type: string
        example: I'm the best tutor of the world :)))
      hourlyRate:
        type: number
        example: 2.5
  
  TutorFreetime:
    type: object
    title: tutorFreeTime
    properties:
      periodeStart:
        type: string
        format: date
        description: start date of tutor's free time
      periodeEnd:
        type: string
        format: date
        description: end date of tutor's free time
      hourStart:
        type: number
        example: 18
        description: start hour of tutor's free time in a day
      hourEnd:
        type: number
        example: 22
        description: end hour of tutor's free time in a day

  TutorReference:
    type: object
    title: tutorReference
    properties:
      education:
        type: array
        items:
          type: object
          properties:
            major:
              type: string
              example: Python
            institute:
              type: string
              example:
            certificate:
              type: string
              example:
    
  TutorWorkingExperience:
    type: object
    title: tutorWorkingExperience
    properties:
      workingExperience:
        type: array
        items:
          type: object
          properties:
            year:
              type: string
              example: '2019'
            experience:
              type: string
              example: Worked at X TUTOR
            description:
              type: string
              example: Back-end Dev
  
  TutorTeachingSubject:
    type: object
    title: tutorTeachingSubject
    properties:
      basedIn:
        type: string
        example: Viet Nam
      teachingSubject:
        type: array
        items:
          type: object
          properties:
            course:
              type: string
              example: Math
            feePerHour:
              type: number
              example: 2.5
            academicLevel:
              type: string
              example: Beginner
            note:
              type: string
              example:

        
paths:
  /examples:
    get:
      tags:
        - Examples
      description: Fetch all examples
      responses:
        200:
          description: Returns all examples
    post:
      tags:
        - Examples
      description: Create a new example
      parameters:
        - name: example
          in: body
          description: an example
          required: true
          schema:
            $ref: "#/definitions/ExampleBody"
      responses:
        200:
          description: Returns all examples

  /examples/{id}:
    get:
      tags:
        - Examples
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the example to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not found

  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
  
  /auth:
    post:
      tags:
        - Auth
      summary: Sign In
      parameters:
        - in: body
          name: user login
          description: The user to login
          schema:
            $ref: '#/definitions/SignInBody'
      responses:
        200:
          description: login succesfull
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /auth/register:
    post:
      tags:
        - Auth
      # summary: Create a new user
      summary: resgister and add new user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            $ref: '#/definitions/RegisterBody'
      responses:
        200:
          description: Registed
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /users:  
    get:
      summary: Fetch all users
      tags:
        - Users
      description: Fetch all users
      # parameters:
      #   - in: header
      #     name: authorization
      #     required: true 
      #     type: string
      #     description: Bearer <token>'
      responses:
        200:
          description: return all users
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'       
  
  /users/all-tutors:
    get:
      summary: fetch all tutors
      tags:
        - Users
      # parameters:
      #   - in: header
      #     name: authorization
      #     required: true 
      #     type: string
      #     description: Bearer <token>'
      responses:
        200:
          description: return all users
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'  
  
  /users/{id}:
    get:
      summary: Fetch the user with the specified id
      tags:
        - Users
      description: Fetch the user with the specified id
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to retrieve
          type: string
        # - in: header
        #   name: authorization
        #   required: true 
        #   type: string
        #   description: Bearer <token>'
      responses:
        200:
          description: return the user with the specified id
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'       
    
    put:
      tags:
        - Users
      summary: Update a user with the specified id
      description: Update a user with the specified id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: the id of the user to retrieve
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
        - name: user
          in: body
          description: the user to update.
          schema:
            $ref: "#/definitions/UserBody"
      responses:
        200:
          description: updated
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'       
    
    delete:
      tags:
        - Users
      summary: Delete a user with the specified id
      description: Delete a user with the specified id
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: the id of the user to retrieve
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
      responses:
        200:
          description: Deleted
        404:
          description: user not found
  
  /users/{id}/avatar:
    patch:
      tags:
        - Users
      description: change profile Picture
      consumes:
         - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: userId
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
        - in: formData
          name: avatar
          type: file
          description: the avatar to upload
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /users/password:
    patch:
      tags:
        - Users
      description: change password
      parameters:
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
        - in: body
          name: password
          schema:
            type: object
            properties:
              oldPassword:
                type: string
              newPassword:
                type: string
          description: change password
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /users/{id}/calendar:
    get:
      tags:
        - Users
      description: fetch to all sessions of the user
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: userId
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /users/{id}/tutor-intro:
    patch:
      tags:
        - Tutor data
      summary: update the tutor's introduction
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
        - in: body
          name: tutorIntro
          schema:
            $ref: '#/definitions/TutorIntro'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /users/{id}/tutor-free-time:
    patch:
      tags:
        - Tutor data
      summary: update the tutor's free time
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
        - in: body
          name: tutorFreeTime
          schema:
            $ref: '#/definitions/TutorFreetime'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /users/{id}/tutor-reference:
    patch:
      tags:
        - Tutor data
      summary: update the tutor's reference
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
        - in: body
          name: tutorIntro
          schema:
            $ref: '#/definitions/TutorReference'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Tutor data
      summary: delete specified row in tutor's reference
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
          required: true 
        - in: body
          name: row
          schema:
            type: object
            properties:
              rowIndex:
                type: integer
                example: 1
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /users/{id}/tutor-working-experience:
    patch:
      tags:
        - Tutor data
      summary: update the tutor's working experience
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
        - in: body
          name: tutorIntro
          schema:
            $ref: '#/definitions/TutorWorkingExperience'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Tutor data
      summary: delete specified row in tutor's exp
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
          required: true 
        - in: body
          name: row
          schema:
            type: object
            properties:
              rowIndex:
                type: integer
                example: 1
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /users/{id}/tutor-teaching-subject:
    patch:
      tags:
        - Tutor data
      summary: update the tutor's teaching subject
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
        - in: body
          name: tutorIntro
          schema:
            $ref: '#/definitions/TutorTeachingSubject'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Tutor data
      summary: delete specified row in tutor's teaching subject
      parameters:
        - in: path
          name: id
          type: string
          description: tutorId
          required: true 
        - in: header
          name: authorization
          type: string
          description: Bearer <token>
          required: true 
        - in: body
          name: row
          schema:
            type: object
            properties:
              rowIndex:
                type: integer
                example: 1
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /cards:
    get:
      tags:
        - Payment Cards
      summary: get all payment cards of specified user
      parameters:
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    
    post:
      tags:
        - Payment Cards
      summary: create new payment card
      parameters:
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
        - in: body
          name: cardInfo
          schema:
            $ref: "#/definitions/PaymentCardBody"
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /cards/{cardId}:
    get:
      tags:
        - Payment Cards
      summary: get card with specified ID
      parameters:
        - in: path
          name: cardId
          required: true 
          type: string
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

    put:
      tags:
        - Payment Cards
      summary: update payment card info
      parameters:
        - in: path
          name: cardId
          required: true 
          type: string
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
        - in: body
          name: cardInfo
          schema:
            $ref: "#/definitions/PaymentCardBody"
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

    delete:
      tags:
        - Payment Cards
      summary: delete payment card info
      parameters:
        - in: path
          name: cardId
          required: true 
          type: string
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /users/{id}/tuition-schedules:
    get:
      tags:
        - Tuition Schedules
      summary: fetch all tuition schedules of specified user
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: userId
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Tuition Schedules
      summary: create new tuition schedule
      parameters:
        - in: path
          name: id
          type: string
          required: true 
          description: id of tutor
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
        - in: body
          name: schedule
          required: true
          schema:
            $ref: '#/definitions/TuitionScheduleBody'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /schedules/{id}:
    get:
      tags:
        - Tuition Schedules
      summary: fetch the tuition schedules of specified user
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: tuition schedule Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    put:
      tags:
        - Tuition Schedules
      summary: update the specified tuition schedule
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: tuition schedule Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
        - in: body
          name: schedule
          required: true
          schema:
            $ref: '#/definitions/TuitionScheduleBody'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Tuition Schedules
      summary: delete the specified tuition schedule
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: tuition schedule Id
        - in: header
          name: authorization
          required: true
          type: string
          description: Bearer <token>
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /schedules/{id}/pay:
    post:
      tags:
        - Tuition Schedules
      summary: pay the bill of specified tuition schedule
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: tuition schedule Id
        - in: header
          name: authorization
          required: true
          type: string
          description: Bearer <token>
        - in: body
          name: paymentGate
          required: true 
          schema:
            $ref: "#/definitions/PaymentCardBody"
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
   
  /schedules/{id}/sessions:
    get:
      tags:
        - Sessions
      summary: fetch all sessions of specified tuition schedule
      parameters:
        - in: path
          name: id
          type: string
          required: true 
          description: tuition schedules Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>      
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    post:
      tags:
        - Sessions
      summary: create new sessions of specified tuition schedule
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: tuition schedules Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /sessions/{id}:
    get:
      tags:
        - Sessions
      summary: fetch specified session
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: session Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
    delete:
      tags:
        - Sessions
      summary: cancelled specified session
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: session Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /sessions/{id}/rate:
    patch:
      tags:
        - Sessions
      summary: rate session
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: session Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
        - in: body
          name: rate
          schema:
            type: object
            properties:
              rateStar:
                type: integer
                enum: [1, 2, 3, 4, 5]
                example: 5
              rateComment:
                type: string
                example: 'Teacher is beautiful :))'
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /sessions/{id}/report:
    patch:
      tags:
        - Sessions
      summary: report session
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: session Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
        - in: body
          name: rate
          schema:
            type: object
            properties:
              reportIssue:
                type: string
                enum: ['Late', 'Absent', 'Left early', 'Technical Dificultly', 'Others']
                example: Late
              reportComment:
                type: string
                example: "She's beautiful, but she was late more than 15m."
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /sessions/{id}/comment:
    patch:
      tags: 
        - Sessions
      summary: add new comment to sprcified session
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: session Id
        - in: header
          name: authorization
          required: true 
          type: string
          description: Bearer <token>
        - in: body
          name: comment
          schema:
            type: object
            properties:
              comment:
                type: string
                example: "Something..."
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
  
  /sessions/{id}/document:
    patch:
      tags:
        - Sessions
      summary: upload document file of specified session
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: session Id
        - in: header
          name: authorization
          required: true
          type: string
          description: Bearer <token>
        - in: formData
          name: document
          type: file
          decription: file upload
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'

  /sessions/{id}/status:
    patch:
      tags: 
        - Sessions
      summary: change status of specified session
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: session Id
        - in: header
          name: authorization
          required: true
          type: string
          description: Bearer <token>
        - in: body
          name: status
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ['Not Started', 'Completed', 'Cancelled', 'Deferred']
                example: 'Cancelled'
          required: false
          description: update new status to specified session
      responses:
        200:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'





# Descriptions of common responses
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'